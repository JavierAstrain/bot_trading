import streamlit as st
import google.generativeai as genai
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from datetime import datetime, timedelta

# --- CONFIGURACI√ìN DE GEMINI ---
genai.configure(api_key=st.secrets["GEMINI_API_KEY"])

# --- INTERFAZ STREAMLIT ---
st.set_page_config(page_title="Asesor de Trading Experto", layout="wide")
st.title("ü§ñüìà Asesor de Trading Experto IA")

st.markdown("""
Este bot act√∫a como **asesor de trading profesional**, analizando:
- Im√°genes de gr√°ficos (an√°lisis t√©cnico con IA)
- Datos hist√≥ricos (Yahoo Finance)
- Contexto t√©cnico + fundamental
- Recomendaciones y estrategias para CFDs
""")

# --- OPCIONES DEL USUARIO ---
option = st.radio("¬øQu√© deseas hacer?", ["üì∑ Subir gr√°fico (imagen)", "üìä Analizar un activo por s√≠mbolo"])

# --- ANALISIS DE IM√ÅGENES ---
if option == "üì∑ Subir gr√°fico (imagen)":
    uploaded_file = st.file_uploader("Sube una imagen de tu gr√°fico (TradingView, MetaTrader, Broker...)", type=["png", "jpg", "jpeg"])
    
    if uploaded_file:
        st.image(uploaded_file, caption="Gr√°fico subido", use_column_width=True)
        
        model = genai.GenerativeModel("gemini-1.5-flash")  # Vision
        response = model.generate_content(
            ["Act√∫a como un asesor de trading experto. Analiza el gr√°fico y responde con:",
             "1. Tendencia detectada",
             "2. Patrones t√©cnicos (si los hay)",
             "3. Estrategia de entrada/salida",
             "4. Niveles sugeridos de SL y TP",
             "5. Recomendaci√≥n de gesti√≥n de riesgo",
             uploaded_file]
        )
        
        st.subheader("üìà An√°lisis T√©cnico del Gr√°fico")
        st.write(response.text)

# --- ANALISIS DE ACTIVOS POR S√çMBOLO ---
if option == "üìä Analizar un activo por s√≠mbolo":
    symbol = st.text_input("Escribe el s√≠mbolo (ej: AAPL, BTC-USD, GOLD, EURUSD=X)")
    period = st.selectbox("Periodo a analizar", ["7d", "1mo", "3mo", "6mo", "1y"])
    interval = st.selectbox("Intervalo de velas", ["15m", "1h", "1d"])
    
    if st.button("üîé Analizar activo") and symbol:
        # Descargar hist√≥rico con yfinance
        df = yf.download(symbol, period=period, interval=interval)
        
        if df.empty:
            st.error("No se encontraron datos para este s√≠mbolo.")
        else:
            st.subheader(f"üìä Hist√≥rico de {symbol}")
            
            # Gr√°fico interactivo
            fig = go.Figure(data=[go.Candlestick(x=df.index,
                                                 open=df['Open'],
                                                 high=df['High'],
                                                 low=df['Low'],
                                                 close=df['Close'])])
            fig.update_layout(title=f"Precio de {symbol}", xaxis_rangeslider_visible=False)
            st.plotly_chart(fig, use_container_width=True)
            
            # Preparar datos para an√°lisis con IA
            ultimo_cierre = df["Close"].iloc[-1]
            resumen = df.tail(20).to_string()
            
            model = genai.GenerativeModel("gemini-1.5-flash")
            prompt = f"""
Act√∫a como un asesor de trading experto. Analiza el activo {symbol}.
Datos recientes:
{resumen}

Precio de cierre m√°s reciente: {ultimo_cierre}

Entrega:
1. An√°lisis de la tendencia general
2. Recomendaci√≥n de entrada/salida
3. Posibles escenarios futuros
4. Estrategia de inversi√≥n en CFDs
5. Niveles sugeridos de Stop Loss y Take Profit
"""
            response = model.generate_content(prompt)
            
            st.subheader("üß† An√°lisis del Activo")
            st.write(response.text)
